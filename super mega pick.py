import requests
from bs4 import BeautifulSoup
from telebot import TeleBot, types
import os
from urllib.parse import urljoin
import time
import threading
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import hashlib

def generate_hash(data):
    return hashlib.md5(data.encode()).hexdigest()[:16]  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_URL = "https://densooluk.media"
TELEGRAM_BOT_TOKEN = "8091170439:AAHKq94yW985dM-Xa0ERxj-t5UQD3sP9Wt8"
CHAT_ID = "@ego12345678"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot(TELEGRAM_BOT_TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤
likes = set()
dislikes = set()
last_action_time = {}
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ "–ê–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ"
def parse_actual_news():
    try:
        response = requests.get(BASE_URL)
        response.encoding = 'utf-8'
        soup = BeautifulSoup(response.text, 'html.parser')

        # –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–∫ "–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ"
        actual_section = soup.find("section", {"id": "section-id-0b9a719f-99c7-4297-8b1c-1b04ab4a3036"})
        if not actual_section:
            print("–°–µ–∫—Ü–∏—è '–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return {}

        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ç—å–∏ –≤ –±–ª–æ–∫–µ "–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ"
        articles = actual_section.find_all("div", class_="sppb-addon-article")

        news_dict = {}

        for i, article in enumerate(articles[:3]):
            title_tag = article.find("h3")
            if not title_tag:
                continue

            title = title_tag.text.strip()
            link_tag = title_tag.find("a")
            link = urljoin(BASE_URL, link_tag["href"]) if link_tag else None

            if title and link:
                news_dict[f"news_{i + 1}"] = {"title": title, "link": link}

        return news_dict
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ '–ê–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ': {e}")
        return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ—Å—Ç–∏
def get_full_news(link):
    try:
        response = requests.get(link)
        response.encoding = 'utf-8'
        soup = BeautifulSoup(response.text, 'html.parser')

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –∏–∑ —Ç–µ–≥–∞ <div itemprop="articleBody">
        article_body = soup.find("div", itemprop="articleBody")
        if article_body:
            full_text = article_body.get_text(separator="\n", strip=True)
        else:
            full_text = "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        description_tag = soup.find("meta", {"name": "description"})
        description = description_tag["content"].strip() if description_tag else ""

        # –ò—Å–∫–ª—é—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ —Ç–∞–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if description and description in full_text:
            full_text = full_text.replace(description, "").strip()

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–æ 3000 —Å–∏–º–≤–æ–ª–æ–≤
        if len(full_text) > 3000:
            full_text = full_text[:3000] + "..."

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–µ–∫—Ü–∏–∏ 'active' (–∏–∑ –±–ª–æ–∫–∞ —Å –∫–ª–∞—Å—Å–æ–º 'sppb-item active')
        active_items = soup.find("div", class_=["carousel-item active", "pull-none entry-image full-image"])

        image_url = None
        if active_items:
            # –ü–æ–∏—Å–∫ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è <img>, —Ç–∞–∫ –∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–∞–π–ª—ã .jpg
            image_tag = active_items.find("img")
            if image_tag:
                image_url = urljoin(BASE_URL, image_tag["src"])
            else:
                # –ò—â–µ–º –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è .jpg
                jpg_tag = active_items.find("a", href=lambda href: href and href.endswith('.jpg'))
                if jpg_tag:
                    image_url = urljoin(BASE_URL, jpg_tag["href"])

        object_tag = soup.find("object", class_="embed-responsive-item")
        youtube_link = object_tag["data"] if object_tag and object_tag.get("data") else None
        if youtube_link and youtube_link.startswith("//"):
            youtube_link = "https:" + youtube_link

        print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {image_url}")
        return full_text, image_url, youtube_link
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        return "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", None


def create_keyboard(news_link, youtube_link):
    keyboard = InlineKeyboardMarkup()

    # –ö–Ω–æ–ø–∫–∞ "–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é" —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º URL
    keyboard.add(InlineKeyboardButton("–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", url=news_link))

    # –ö–Ω–æ–ø–∫–∞ "–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ", –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if youtube_link:
        keyboard.add(InlineKeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ", url=youtube_link))

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–∏—Ö callback_data
    like_data = f"like:{generate_hash(news_link)}"
    dislike_data = f"dislike:{generate_hash(news_link)}"

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤
    keyboard.row(
        InlineKeyboardButton(f"üëç {len(likes)}", callback_data=like_data),
        InlineKeyboardButton(f"üëé {len(dislikes)}", callback_data=dislike_data)
    )

    return keyboard


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    global likes, dislikes, last_action_time

    user_id = call.from_user.id
    current_time = time.time()  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ—à–ª–æ –ª–∏ 10 —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in last_action_time:
            elapsed_time = current_time - last_action_time[user_id]
            if elapsed_time < 10:
                # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 10 —Å–µ–∫—É–Ω–¥, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
                bot.answer_callback_query(call.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –Ω–∞–∂–∞—Ç–∏–µ–º.", show_alert=True)
                return

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        last_action_time[user_id] = current_time

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ callback_data
        if call.data.startswith('like:'):
            if user_id not in likes:
                likes.add(user_id)
                dislikes.discard(user_id)
            else:
                likes.remove(user_id)
        elif call.data.startswith('dislike:'):
            if user_id not in dislikes:
                dislikes.add(user_id)
                likes.discard(user_id)
            else:
                dislikes.remove(user_id)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è
        bot.answer_callback_query(call.id, "–í–∞—à –≤—ã–±–æ—Ä —É—á—Ç—ë–Ω!")

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        current_markup = call.message.reply_markup

        # –ü–æ–∏—Å–∫ –Ω—É–∂–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –∫–Ω–æ–ø–∫–∞–º–∏-—Å—Å—ã–ª–∫–∞–º–∏)
        news_link = None
        youtube_link = None
        for button_row in current_markup.keyboard:
            for button in button_row:
                if button.url:
                    if "youtube" in button.url:
                        youtube_link = button.url
                    else:
                        news_link = button.url

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏
        new_keyboard = create_keyboard(news_link=news_link, youtube_link=youtube_link)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        updated_message = False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if current_markup.keyboard != new_keyboard.keyboard:
            updated_message = True

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        current_text = call.message.text
        updated_text = f"üîî *{call.message.text}*"

        if current_text != updated_text:
            updated_message = True

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if updated_message:
            bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=new_keyboard
            )

        print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query: {e}")





# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–∞–ø—ã
def send_text_for_comm():
        text_for_comm = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏."
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç (–∏–ª–∏ –¥—Ä—É–≥–æ–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        bot.send_message(chat_id=CHAT_ID, text=text_for_comm, parse_mode="Markdown")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
def send_to_telegram(news):
    try:
        full_text, image_url, youtube_link = get_full_news(news['link'])
        message = f"üîî *{news['title']}*\n\n{full_text}"
        if len(message) > 4096:
            message = message[:4096 - 50] + "..."

        keyboard = create_keyboard(news['link'], youtube_link)
        if youtube_link:
            message += f"\n [‚†Ä]({youtube_link})"
        if image_url:
            image_response = requests.get(image_url)
            with open("temp_image.jpg", 'wb') as f:
                f.write(image_response.content)

            with open("temp_image.jpg", 'rb') as img:
                bot.send_photo(
                    chat_id=CHAT_ID,
                    photo=img,
                    caption=message[:1024],
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
            os.remove("temp_image.jpg")
        else:
            bot.send_message(
                chat_id=CHAT_ID,
                text=message,
                parse_mode="Markdown",
                reply_markup=keyboard
            )

        print("–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")

        # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–∞–ø—ã
        send_text_for_comm()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
def check_for_new_news():
    last_news_link = None
    while True:
        news_list = parse_actual_news()
        if news_list:
            latest_news = news_list['news_2']
            if latest_news['link'] != last_news_link:
                last_news_link = latest_news['link']
                send_to_telegram(latest_news)
        time.sleep(300)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    news_thread = threading.Thread(target=check_for_new_news, daemon=True)
    news_thread.start()
    bot.polling()