import requests
from bs4 import BeautifulSoup
from telebot import TeleBot, types
import os
from urllib.parse import urljoin
import time
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_URL = "https://densooluk.media"
TELEGRAM_BOT_TOKEN = "8091170439:AAHKq94yW985dM-Xa0ERxj-t5UQD3sP9Wt8"
CHAT_ID = "@jkdsajkdsa"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot(TELEGRAM_BOT_TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
last_news_link = None

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
MAX_MESSAGE_LENGTH = 400

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ "–ê–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ"
def parse_actual_news():
    try:
        response = requests.get(BASE_URL)
        response.encoding = 'utf-8'
        soup = BeautifulSoup(response.text, 'html.parser')

        # –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–∫ "–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ"
        actual_section = soup.find("div", class_="sppb-col-xs-6 sppb-col-sm-4 sppb-col-md-4 sppb-col-lg-4 sppb-col-12")
        if not actual_section:
            print("–°–µ–∫—Ü–∏—è '–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return []

        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ç—å–∏ –≤ –±–ª–æ–∫–µ "–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ"
        articles = actual_section.find_all("div", class_="sppb-addon-article")
        news_list = []
        for article in articles:
            title_tag = article.find("h3")
            if not title_tag:
                continue

            title = title_tag.text.strip()
            link_tag = title_tag.find("a")
            link = urljoin(BASE_URL, link_tag["href"]) if link_tag else None

            if title and link:
                news_list.append({"title": title, "link": link})

        return news_list
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ '–ê–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ': {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ—Å—Ç–∏
def get_full_news(link):
    try:
        response = requests.get(link)
        response.encoding = 'utf-8'
        soup = BeautifulSoup(response.text, 'html.parser')

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –∏–∑ —Ç–µ–≥–∞ <div itemprop="articleBody">
        article_body = soup.find("div", itemprop="articleBody")
        if article_body:
            full_text = article_body.get_text(separator="\n", strip=True)
        else:
            full_text = "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        description_tag = soup.find("meta", {"name": "description"})
        description = description_tag["content"].strip() if description_tag else ""

        # –ò—Å–∫–ª—é—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ —Ç–∞–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if description and description in full_text:
            full_text = full_text.replace(description, "").strip()

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–æ 3000 —Å–∏–º–≤–æ–ª–æ–≤
        if len(full_text) > 3000:
            full_text = full_text[:3000] + "..."

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_tag = article_body.find("img") if article_body else None
        image_url = image_tag["src"] if image_tag else None
        if image_url and not image_url.startswith("http"):
            image_url = urljoin(BASE_URL, image_url)

        return full_text, image_url
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        return "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
def send_to_telegram(news):
    try:
        full_text, image_url = get_full_news(news['link'])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üîî *{news['title']}*\n\n{full_text}"

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
        if len(message) > 4096:
            message = message[:4096 - 50] + "..."  # –û–±—Ä–µ–∑–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–æ–µ—Ç–æ—á–∏–µ

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = types.InlineKeyboardMarkup()

        # –ö–Ω–æ–ø–∫–∞ "–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é"
        keyboard.add(types.InlineKeyboardButton("–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", url=news['link']))

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ
        like_data = f"like:{news['link'][:50]}"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å—Å—ã–ª–∫–∏ –¥–ª—è callback_data
        dislike_data = f"dislike:{news['link'][:50]}"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å—Å—ã–ª–∫–∏ –¥–ª—è callback_data

        # –ö–Ω–æ–ø–∫–∏ –ª–∞–π–∫–∞ –∏ –¥–∏–∑–ª–∞–π–∫–∞
        keyboard.row(
            types.InlineKeyboardButton("üëç –õ–∞–π–∫", callback_data=like_data),
            types.InlineKeyboardButton("üëé –î–∏–∑–ª–∞–π–∫", callback_data=dislike_data)
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if image_url:
            image_response = requests.get(image_url)
            image_path = "temp_image.jpg"
            with open(image_path, 'wb') as f:
                f.write(image_response.content)

            with open(image_path, 'rb') as img:
                bot.send_photo(chat_id=CHAT_ID, photo=img, caption=message, parse_mode="Markdown", reply_markup=keyboard)
            os.remove(image_path)
        else:
            bot.send_message(chat_id=CHAT_ID, text=message, parse_mode="Markdown", reply_markup=keyboard)

        print("–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_query_handler(call):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        callback_data = call.data

        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–õ–∞–π–∫"
        if callback_data.startswith("like:"):
            bot.answer_callback_query(call.id, "–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫!")  # –û—Ç–≤–µ—Ç –Ω–∞ –∫–ª–∏–∫
            bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ª–∞–π–∫! üëç")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–¥–±–µ–∫–æ–º

        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–∏–∑–ª–∞–π–∫"
        elif callback_data.startswith("dislike:"):
            bot.answer_callback_query(call.id, "–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –¥–∏–∑–ª–∞–π–∫!")  # –û—Ç–≤–µ—Ç –Ω–∞ –∫–ª–∏–∫
            bot.send_message(call.message.chat.id, "–ú—ã —É—á—Ç–µ–º –≤–∞—à –æ—Ç–∑—ã–≤! üëé")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–¥–±–µ–∫–æ–º

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
def check_for_new_news():
    global last_news_link
    while True:
        news_list = parse_actual_news()
        if news_list:
            latest_news = news_list[0]  # –ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å
            if latest_news['link'] != last_news_link:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å
                last_news_link = latest_news['link']
                send_to_telegram(latest_news)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å
            else:
                print("–ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.")
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π.")
        time.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /news
@bot.message_handler(commands=['news'])
def send_last_news(message):
    news_list = parse_actual_news()
    if news_list:
        send_to_telegram(news_list[0])  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å
    else:
        bot.reply_to(message, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /news2
@bot.message_handler(commands=['news2'])
def send_second_last_news(message):
    news_list = parse_actual_news()
    if len(news_list) > 1:
        send_to_telegram(news_list[1])  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å
    else:
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–π.")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    news_thread = threading.Thread(target=check_for_new_news, daemon=True)
    news_thread.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
    bot.polling()
